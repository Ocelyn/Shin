import * as React from "react";
import { Scroll, PropertyControls, ControlType } from "framer";

const TwitterStickyContext = React.createContext({} as any);
const TwitterStickyConsumer = TwitterStickyContext.Consumer;

class TwitterStickyProvider extends React.Component {
  state = {
    top: 0,
    minTop: 0,
    duration: 200,
  };

  render() {
    const { top, minTop, duration } = this.state;
    return (
      <TwitterStickyContext.Provider value={{
        top,
        minTop,
        duration,
        updateTop: (top: number) => this.setState({ top }),
        updateProps: ({ minTop, duration }) => this.setState({ minTop, duration }),
      }}>
        {this.props.children}
      </ TwitterStickyContext.Provider>
    );
  }
};

type Props = { minTop: number; duration: number; width: number; height: number, header: any };

export class TwitterHeader extends React.Component<Props> {
  render() {
    return (
      <TwitterStickyProvider>
        <ScrollableContent {...this.props} children={this.props.children} />
      </TwitterStickyProvider>
    );
  }

  static defaultProps = {
    minTop: 0,
    duration: 200,
  }

  static propertyControls: PropertyControls = {
    minTop: {
      type: ControlType.Number,
      title: "Offset",
      min: 0
    },
    duration: {
      type: ControlType.Number,
      title: 'Duration(ms)',
      min: 0
    },
    header: {
      type: ControlType.ComponentInstance,
      title: 'Header',
    }
  }
}

class ScrollableContent extends React.Component<Props> {
  private _set = false;
  render() {
    const { width, height, header, children } = this.props;
    return (
      <TwitterStickyConsumer>
        {({ updateProps, updateTop }) => {
          if (!this._set) {
            this._set = true;
            updateProps(this.props);
          }
          return (
            <div id="wrapper">
              <Scroll
                width={width}
                height={height}
                overflow="hidden"
                direction="vertical"
                onMove={({ y }) => updateTop(y)}
              >
                {children}
              </Scroll>
              <TwitterStickyHeader children={header} />
            </div>
          );
        }}
      </TwitterStickyConsumer>
    );
  }
}

class TwitterStickyHeader extends React.Component {
  render() {
    return (
      <TwitterStickyConsumer>
        {value => <Content {...value} children={this.props.children} />}
      </TwitterStickyConsumer>
    );
  }
}

interface ContentProps {
  top: number;
  minTop: number;
  duration: number;
}

class Content extends React.Component<ContentProps> {
  private _latestTop = 0;
  private _updatedAt = Date.now();

  state = {
    visible: true,
  };

  componentWillReceiveProps({ top, minTop, duration }: ContentProps) {
    const { visible } = this.state;
    const now = Date.now();
    const updatable = now > this._updatedAt + (duration + 100);
    const shouldHide = this._latestTop > top && -top > minTop && visible === true;
    const shouldVisible = this._latestTop < top && visible === false;
    if (updatable && (shouldHide || shouldVisible)) {
      this._updatedAt = Date.now();
      this.setState({ visible: !visible });
    }
    this._latestTop = top;
  }

  render() {
    const { duration, children } = this.props;
    const { visible } = this.state;
    const { width = 0, height = 0 } = this.getChildrenProp(children);
    return (
      <div id="el" style={{
        width,
        height,
        position: 'relative',
        transform: `translateY(${visible ? 0 : '-100%'})`,
        transition: `transform ${duration}ms ease-in`
      }}>
        {
          React.Children.map(children, (child: any) =>
            React.cloneElement(child, { top: 0, left: 0 })
          )
        }
      </div >
    );
  }

  private getChildrenProp(children) {
    const child = children[0];
    return child ? child.props : {};
  }
}
